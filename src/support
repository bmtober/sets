me=$(basename $0)

usage="

NAME
  ${me} - Support of an item set.

SYNOPSIS
  ${me} [OPTIONS] itemset
  ${me} [OPTIONS] antecedent consequent

DESCRIPTION
  The first form returns the support of an itemset.  The second form
  returns the support of a implication for antecedent to consequent
  item sets.

OPTIONS
  -h  Displays help message.

  -l  List the set files that match the item set.

  -d corpus
    Specifies the directory with the data base of transaction itemsets.
    Defaults to current directory or the CORPUS environment variable,
    if set.


AUTHOR
  Implementation by Berend M. Tober.

  Based on https://en.wikipedia.org/wiki/Association_rule_learning

"


checkscript ()
{
  # confirm that a script file is visible in path
  which "$1" &> /dev/null
  [ $? -ne 0 ]  && echo "$1 not found in path" && exit
}

checkscript "includes"
checkscript "members"
checkscript "dc"

unset listmatches
itemset=".${me}.$$"
trap 'rm "${itemset}"' EXIT

while [[ $# -gt 0 ]]
do
  case "${1}" in
    -h)
      echo "${usage}"
      exit
      ;;
    -l)
      listmatches="true"
      ;;
    -d)
      shift
      CORPUS="${1}"
      ;;
    -*)
      echo "Invalid option '${1}'"
      exit
      ;;
    *)
      members "${1--}" >> "${itemset}"
      ;;
  esac
  shift
done  

: ${CORPUS?}
[ ! -d "${CORPUS}" ] && echo "'${CORPUS}' is not a directory or not found." && exit 1

[ ! -f  "${itemset}" ] && echo "Itemset '${itemset}' not found." && exit

numerator=0
denominator=0
for n in $(find "${CORPUS}" -type f)
do
  denominator=$((denominator + 1))
  includes "${itemset}" "${n}"
  result=$?
  [ ${result} -eq 0 ] && numerator=$((numerator + 1))
  [ -n "${listmatches}" ] && [ ${result} -eq 0 ] && echo "${n}"
done

[ -z "${listmatches}" ] && dc <<< "10k$numerator $denominator /p"

